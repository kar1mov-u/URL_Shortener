// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: urls.sql

package database

import (
	"context"
	"time"
)

const createEntry = `-- name: CreateEntry :exec
INSERT INTO urls (
    original_url, hashed_url, created_at, ttl)
    VALUES (
        $1, $2, NOW(), $3
    )
`

type CreateEntryParams struct {
	OriginalUrl string
	HashedUrl   string
	Ttl         time.Time
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) error {
	_, err := q.db.ExecContext(ctx, createEntry, arg.OriginalUrl, arg.HashedUrl, arg.Ttl)
	return err
}

const deleteTtl = `-- name: DeleteTtl :exec
DELETE FROM urls WHERE ttl<NOW()::time
`

func (q *Queries) DeleteTtl(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteTtl)
	return err
}

const getUrlbyHash = `-- name: GetUrlbyHash :one
SELECT original_url FROM urls WHERE hashed_url=$1
`

func (q *Queries) GetUrlbyHash(ctx context.Context, hashedUrl string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUrlbyHash, hashedUrl)
	var original_url string
	err := row.Scan(&original_url)
	return original_url, err
}

const getUrlbyOrig = `-- name: GetUrlbyOrig :one
SELECT hashed_url FROM urls WHERE original_url=$1
`

func (q *Queries) GetUrlbyOrig(ctx context.Context, originalUrl string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUrlbyOrig, originalUrl)
	var hashed_url string
	err := row.Scan(&hashed_url)
	return hashed_url, err
}
